#+TITLE: ARM NEON Image Processing Examples
#+AUTHOR: Aidan Pace (@aygp-dr)
#+EMAIL: apace@defrecord.com
#+DESCRIPTION: Image processing algorithms using ARM NEON SIMD instructions
#+STARTUP: overview
#+PROPERTY: header-args :eval never-export
#+OPTIONS: toc:3 num:2 ^:{}

* Introduction
This document contains image processing implementations using ARM NEON SIMD instructions. Each section explores a different image processing algorithm through a Socratic learning approach, examining both scalar and SIMD implementations.

* RGB to Grayscale Conversion
:PROPERTIES:
:header-args: :tangle examples/rgb_to_gray.c :mkdirp yes
:END:

Converting RGB images to grayscale is a fundamental image processing operation. The standard formula is:

Gray = 0.299*R + 0.587*G + 0.114*B

We'll implement this using fixed-point arithmetic for better performance.

** Implementation
#+BEGIN_SRC c
/**
 * rgb_to_gray.c
 * Demonstrates RGB to grayscale conversion using ARM NEON SIMD
 */
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <time.h>
#include <string.h>
#include <arm_neon.h>
#include "../include/platform_detect.h"
#include "../include/neon_utils.h"
#include "../include/perf_test.h"

// Scalar (non-SIMD) implementation for comparison
void scalar_rgb_to_gray(const uint8_t* rgb, uint8_t* gray, size_t pixel_count) {
    for (size_t i = 0; i < pixel_count; i++) {
        const uint8_t* pixel = rgb + i * 3;
        // Standard grayscale conversion: Y = 0.299*R + 0.587*G + 0.114*B
        uint32_t r = pixel[0];
        uint32_t g = pixel[1];
        uint32_t b = pixel[2];
        gray[i] = (uint8_t)((r * 77 + g * 150 + b * 29) >> 8);  // Fixed-point calculation
    }
}

// NEON SIMD implementation
void neon_rgb_to_gray(const uint8_t* rgb, uint8_t* gray, size_t pixel_count) {
    // RGB coefficients for grayscale conversion: R:0.299, G:0.587, B:0.114
    // Scale by 256 for fixed-point calculation
    const uint8_t r_coeff = 77;  // 0.299 * 256 ≈ 77
    const uint8_t g_coeff = 150; // 0.587 * 256 ≈ 150
    const uint8_t b_coeff = 29;  // 0.114 * 256 ≈ 29
    
    // Create vectors with coefficients
    uint8x8_t vr_coeff = vdup_n_u8(r_coeff);
    uint8x8_t vg_coeff = vdup_n_u8(g_coeff);
    uint8x8_t vb_coeff = vdup_n_u8(b_coeff);
    
    // Process 8 pixels at a time
    size_t vec_size = pixel_count / 8;
    
    for (size_t i = 0; i < vec_size; i++) {
        // Load 8 RGB pixels (24 bytes)
        const uint8_t* pixel_ptr = rgb + i * 24;
        
        // Extract R, G, B channels
        uint8x8x3_t rgb_pixels = vld3_u8(pixel_ptr);
        uint8x8_t r_channel = rgb_pixels.val[0];
        uint8x8_t g_channel = rgb_pixels.val[1];
        uint8x8_t b_channel = rgb_pixels.val[2];
        
        // Multiply each channel by its coefficient
        uint16x8_t r_contrib = vmull_u8(r_channel, vr_coeff);
        uint16x8_t g_contrib = vmull_u8(g_channel, vg_coeff);
        uint16x8_t b_contrib = vmull_u8(b_channel, vb_coeff);
        
        // Sum the contributions
        uint16x8_t sum = vaddq_u16(r_contrib, g_contrib);
        sum = vaddq_u16(sum, b_contrib);
        
        // Divide by 256 (shift right by 8)
        uint8x8_t gray_pixels = vshrn_n_u16(sum, 8);
        
        // Store the result
        vst1_u8(gray + i * 8, gray_pixels);
    }
    
    // Handle remaining pixels
    for (size_t i = vec_size * 8; i < pixel_count; i++) {
        const uint8_t* pixel = rgb + i * 3;
        uint16_t gray_val = (pixel[0] * r_coeff + pixel[1] * g_coeff + pixel[2] * b_coeff) >> 8;
        gray[i] = (uint8_t)gray_val;
    }
}

// Generate a synthetic RGB image
void generate_test_image(uint8_t* rgb, size_t pixel_count) {
    for (size_t i = 0; i < pixel_count; i++) {
        // Create a gradient pattern
        uint8_t r = (uint8_t)(i % 256);
        uint8_t g = (uint8_t)((i / 256) % 256);
        uint8_t b = (uint8_t)((i / 65536) % 256);
        
        rgb[i * 3 + 0] = r;
        rgb[i * 3 + 1] = g;
        rgb[i * 3 + 2] = b;
    }
}

// Main function
int main(int argc, char** argv) {
    // Default image size
    size_t width = 1024;
    size_t height = 768;
    
    // Allow overriding image size from command line
    if (argc > 2) {
        width = atoi(argv[1]);
        height = atoi(argv[2]);
        if (width <= 0 || height <= 0) {
            width = 1024;
            height = 768;
        }
    }
    
    size_t pixel_count = width * height;
    
    printf("RGB to Grayscale Conversion Example\n");
    printf("----------------------------------\n");
    printf("Image size: %zux%zu (%zu pixels)\n", width, height, pixel_count);
    
    // Check if NEON is supported
    if (!check_neon_support()) {
        printf("ERROR: ARM NEON is not supported on this platform.\n");
        return 1;
    }
    
    // Print platform information
    print_platform_info();
    
    // Allocate memory for images
    uint8_t* rgb = (uint8_t*)malloc(pixel_count * 3);  // RGB (3 bytes per pixel)
    uint8_t* gray_neon = (uint8_t*)malloc(pixel_count);   // Grayscale (1 byte per pixel)
    uint8_t* gray_scalar = (uint8_t*)malloc(pixel_count); // Grayscale (1 byte per pixel)
    
    if (!rgb || !gray_neon || !gray_scalar) {
        printf("ERROR: Memory allocation failed.\n");
        return 1;
    }
    
    // Generate a test image
    generate_test_image(rgb, pixel_count);
    
    // Create comparison timer
    perf_comparison_t* comp = comparison_create("RGB to Grayscale");
    
    // Number of iterations for more accurate timing
    const int iterations = 10;
    
    // Perform RGB to grayscale conversion using NEON
    timer_start(comp->simd_timer);
    for (int i = 0; i < iterations; i++) {
        neon_rgb_to_gray(rgb, gray_neon, pixel_count);
    }
    timer_stop(comp->simd_timer);
    
    // Perform RGB to grayscale conversion using scalar code
    timer_start(comp->scalar_timer);
    for (int i = 0; i < iterations; i++) {
        scalar_rgb_to_gray(rgb, gray_scalar, pixel_count);
    }
    timer_stop(comp->scalar_timer);
    
    // Verify results
    int errors = 0;
    for (size_t i = 0; i < pixel_count; i++) {
        if (gray_neon[i] != gray_scalar[i]) {
            errors++;
        }
    }
    
    printf("Verification: %d errors out of %zu pixels\n", errors, pixel_count);
    
    // Print performance comparison
    comparison_print(comp);
    
    // Clean up
    free(rgb);
    free(gray_neon);
    free(gray_scalar);
    comparison_destroy(comp);
    
    return 0;
}
#+END_SRC

** Key NEON Operations

What makes the NEON implementation efficient:

1. *Channel Separation*: `vld3_u8` extracts R,G,B channels into separate vectors
2. *Parallelism*: Processing 8 pixels simultaneously
3. *Fixed-point Multiplication*: `vmull_u8` multiplies 8 elements at once
4. *Efficient Division*: Using bit shift (`vshrn_n_u16`) instead of division

** Questions for Exploration
1. How does the interleaved RGB layout affect SIMD processing?
2. Why use fixed-point arithmetic instead of floating-point?
3. What's the performance difference between `vld3_u8` vs manually extracting channels?
4. How would you handle RGB images with alpha channel (RGBA)?

* Box Blur Filter (3x3)
:PROPERTIES:
:header-args: :tangle examples/box_blur.c :mkdirp yes
:END:

A box blur is a simple image blur that averages pixel values in a rectangular area. We'll implement a 3x3 box blur for grayscale images.

** Implementation
#+BEGIN_SRC c
/**
 * box_blur.c
 * Demonstrates 3x3 box blur using ARM NEON SIMD
 */
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <time.h>
#include <string.h>
#include <arm_neon.h>
#include "../include/platform_detect.h"
#include "../include/neon_utils.h"
#include "../include/perf_test.h"

// Scalar (non-SIMD) implementation for comparison
void scalar_blur_gray_3x3(const uint8_t* input, uint8_t* output, int width, int height) {
    // Skip the border pixels for simplicity
    for (int y = 1; y < height - 1; y++) {
        for (int x = 1; x < width - 1; x++) {
            uint32_t sum = 0;
            
            // 3x3 Box blur (simple average filter)
            for (int ky = -1; ky <= 1; ky++) {
                for (int kx = -1; kx <= 1; kx++) {
                    sum += input[(y + ky) * width + (x + kx)];
                }
            }
            
            // Divide by 9 (number of pixels in 3x3 kernel)
            output[y * width + x] = (uint8_t)(sum / 9);
        }
    }
    
    // Handle border pixels (just copy from input)
    for (int x = 0; x < width; x++) {
        output[x] = input[x];  // Top row
        output[(height - 1) * width + x] = input[(height - 1) * width + x];  // Bottom row
    }
    
    for (int y = 1; y < height - 1; y++) {
        output[y * width] = input[y * width];  // Left column
        output[y * width + width - 1] = input[y * width + width - 1];  // Right column
    }
}

// NEON SIMD implementation
void neon_blur_gray_3x3(const uint8_t* input, uint8_t* output, int width, int height) {
    // 3x3 Box blur (simple average filter)
    // Skip the border pixels for simplicity
    
    // Create a vector of 9 (for the 3x3 kernel divisor)
    uint8x8_t vdiv9 = vdup_n_u8(9);
    
    for (int y = 1; y < height - 1; y++) {
        // Process 8 pixels at a time
        for (int x = 1; x < width - 8; x += 8) {
            // Initialize accumulator
            uint16x8_t sum = vdupq_n_u16(0);
            
            // Accumulate 3x3 neighborhood for 8 adjacent pixels
            for (int ky = -1; ky <= 1; ky++) {
                for (int kx = -1; kx <= 1; kx++) {
                    uint8x8_t neighborhood = vld1_u8(input + (y + ky) * width + (x + kx));
                    sum = vaddw_u8(sum, neighborhood);
                }
            }
            
            // Divide by 9 (approximate using multiply and shift)
            // Using fixed-point: multiply by 255/9 ≈ 28.33.. and then shift right by 8
            uint16x8_t scaled = vmulq_n_u16(sum, 28);
            uint8x8_t result = vshrn_n_u16(scaled, 8);
            
            // Store the result
            vst1_u8(output + y * width + x, result);
        }
        
        // Handle remaining pixels
        for (int x = width - (width - 1) % 8; x < width - 1; x++) {
            uint16_t sum = 0;
            for (int ky = -1; ky <= 1; ky++) {
                for (int kx = -1; kx <= 1; kx++) {
                    sum += input[(y + ky) * width + (x + kx)];
                }
            }
            output[y * width + x] = (uint8_t)(sum / 9);
        }
    }
    
    // Handle border pixels (just copy from input)
    for (int x = 0; x < width; x++) {
        output[x] = input[x];  // Top row
        output[(height - 1) * width + x] = input[(height - 1) * width + x];  // Bottom row
    }
    
    for (int y = 1; y < height - 1; y++) {
        output[y * width] = input[y * width];  // Left column
        output[y * width + width - 1] = input[y * width + width - 1];  // Right column
    }
}

// Generate a synthetic grayscale test image
void generate_test_image(uint8_t* gray, int width, int height) {
    for (int y = 0; y < height; y++) {
        for (int x = 0; x < width; x++) {
            // Create a pattern with some detail (checkerboard + gradient)
            uint8_t checker = ((x / 8 + y / 8) % 2) * 128;
            uint8_t gradient = (uint8_t)((x * y) % 128);
            gray[y * width + x] = checker + gradient;
        }
    }
}

// Function to save a grayscale image as PGM (for visualization)
void save_pgm(const char* filename, const uint8_t* gray, int width, int height) {
    FILE* file = fopen(filename, "wb");
    if (!file) {
        printf("ERROR: Could not open file %s for writing.\n", filename);
        return;
    }
    
    // Write PGM header
    fprintf(file, "P5\n%d %d\n255\n", width, height);
    
    // Write image data
    fwrite(gray, 1, width * height, file);
    
    fclose(file);
}

// Main function
int main(int argc, char** argv) {
    // Default image size
    int width = 512;
    int height = 512;
    
    // Allow overriding image size from command line
    if (argc > 2) {
        width = atoi(argv[1]);
        height = atoi(argv[2]);
        if (width <= 0 || height <= 0) {
            width = 512;
            height = 512;
        }
    }
    
    printf("Box Blur (3x3) Example\n");
    printf("---------------------\n");
    printf("Image size: %dx%d\n", width, height);
    
    // Check if NEON is supported
    if (!check_neon_support()) {
        printf("ERROR: ARM NEON is not supported on this platform.\n");
        return 1;
    }
    
    // Print platform information
    print_platform_info();
    
    // Allocate memory for images
    uint8_t* input = (uint8_t*)malloc(width * height);
    uint8_t* output_neon = (uint8_t*)malloc(width * height);
    uint8_t* output_scalar = (uint8_t*)malloc(width * height);
    
    if (!input || !output_neon || !output_scalar) {
        printf("ERROR: Memory allocation failed.\n");
        return 1;
    }
    
    // Generate a test image
    generate_test_image(input, width, height);
    
    // Create comparison timer
    perf_comparison_t* comp = comparison_create("Box Blur (3x3)");
    
    // Number of iterations for more accurate timing
    const int iterations = 20;
    
    // Perform blur using NEON
    timer_start(comp->simd_timer);
    for (int i = 0; i < iterations; i++) {
        neon_blur_gray_3x3(input, output_neon, width, height);
    }
    timer_stop(comp->simd_timer);
    
    // Perform blur using scalar code
    timer_start(comp->scalar_timer);
    for (int i = 0; i < iterations; i++) {
        scalar_blur_gray_3x3(input, output_scalar, width, height);
    }
    timer_stop(comp->scalar_timer);
    
    // Verify results
    int errors = 0;
    int max_diff = 0;
    
    for (int i = 0; i < width * height; i++) {
        int diff = abs((int)output_neon[i] - (int)output_scalar[i]);
        if (diff > 1) {  // Allow small differences due to fixed-point approximation
            errors++;
            if (diff > max_diff) {
                max_diff = diff;
            }
        }
    }
    
    printf("Verification: %d errors (max diff: %d) out of %d pixels\n", 
           errors, max_diff, width * height);
    
    // Save images for visual inspection
    save_pgm("input.pgm", input, width, height);
    save_pgm("output_neon.pgm", output_neon, width, height);
    save_pgm("output_scalar.pgm", output_scalar, width, height);
    
    printf("Saved images: input.pgm, output_neon.pgm, output_scalar.pgm\n");
    
    // Print performance comparison
    comparison_print(comp);
    
    // Clean up
    free(input);
    free(output_neon);
    free(output_scalar);
    comparison_destroy(comp);
    
    return 0;
}
#+END_SRC

** Key NEON Operations

What makes the NEON implementation efficient:

1. *Parallelism*: Processing 8 pixels at once along a row
2. *Widening Addition*: Using `vaddw_u8` to accumulate without overflow
3. *Fixed-point Division*: Multiplication by 28 and shifting right by 8 approximates division by 9
4. *Efficient Memory Access*: Loading adjacent pixels with `vld1_u8`

** Questions for Exploration
1. How does the 3x3 neighborhood affect SIMD efficiency (due to sliding window)?
2. Why use approximated division? How accurate is the approximation?
3. How would you extend this to handle larger kernel sizes (5x5, 7x7)?
4. Can we optimize the border handling?

* Sobel Edge Detection
:PROPERTIES:
:header-args: :tangle examples/sobel_edge.c :mkdirp yes
:END:

Sobel edge detection is a gradient-based method that calculates the gradient magnitude at each pixel. It uses two 3x3 kernels to compute gradient in X and Y directions.

** Implementation
#+BEGIN_SRC c
/**
 * sobel_edge.c
 * Demonstrates Sobel edge detection using ARM NEON SIMD
 */
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <time.h>
#include <string.h>
#include <math.h>
#include <arm_neon.h>
#include "../include/platform_detect.h"
#include "../include/neon_utils.h"
#include "../include/perf_test.h"

// Scalar (non-SIMD) implementation for comparison
void scalar_sobel_edge(const uint8_t* input, uint8_t* output, int width, int height) {
    // Sobel kernels for x and y gradients
    const int sobel_x[3][3] = {
        {-1, 0, 1},
        {-2, 0, 2},
        {-1, 0, 1}
    };
    
    const int sobel_y[3][3] = {
        {-1, -2, -1},
        { 0,  0,  0},
        { 1,  2,  1}
    };
    
    // Skip the border pixels for simplicity
    for (int y = 1; y < height - 1; y++) {
        for (int x = 1; x < width - 1; x++) {
            int gx = 0;
            int gy = 0;
            
            // Apply Sobel kernels
            for (int ky = -1; ky <= 1; ky++) {
                for (int kx = -1; kx <= 1; kx++) {
                    int pixel = input[(y + ky) * width + (x + kx)];
                    gx += pixel * sobel_x[ky + 1][kx + 1];
                    gy += pixel * sobel_y[ky + 1][kx + 1];
                }
            }
            
            // Compute magnitude
            int magnitude = sqrt(gx * gx + gy * gy);
            
            // Clamp to [0, 255]
            if (magnitude > 255) magnitude = 255;
            
            output[y * width + x] = (uint8_t)magnitude;
        }
    }
    
    // Handle border pixels (set to 0)
    for (int x = 0; x < width; x++) {
        output[x] = 0;  // Top row
        output[(height - 1) * width + x] = 0;  // Bottom row
    }
    
    for (int y = 1; y < height - 1; y++) {
        output[y * width] = 0;  // Left column
        output[y * width + width - 1] = 0;  // Right column
    }
}

// NEON SIMD implementation
void neon_sobel_edge(const uint8_t* input, uint8_t* output, int width, int height) {
    // Skip the border pixels for simplicity
    for (int y = 1; y < height - 1; y++) {
        // Process 8 pixels at a time
        for (int x = 1; x < width - 9; x += 8) {
            // Load 3x3 neighborhood for 8 adjacent pixels
            // Load 10 pixels for each row (8 + 2 border pixels)
            uint8x16_t top_row = vld1q_u8(input + (y - 1) * width + (x - 1));
            uint8x16_t mid_row = vld1q_u8(input + y * width + (x - 1));
            uint8x16_t bot_row = vld1q_u8(input + (y + 1) * width + (x - 1));
            
            // Extract relevant parts for our 3x3 window
            // For first 8 pixels we need indices 0-9 from each row
            uint8x8_t top_left = vget_low_u8(top_row);       // top row [0-7]
            uint8x8_t top_right = vext_u8(vget_low_u8(top_row), vget_high_u8(top_row), 1); // top row [1-8]
            uint8x8_t top_more_right = vext_u8(vget_low_u8(top_row), vget_high_u8(top_row), 2); // top row [2-9]
            
            uint8x8_t mid_left = vget_low_u8(mid_row);       // mid row [0-7]
            uint8x8_t mid_right = vext_u8(vget_low_u8(mid_row), vget_high_u8(mid_row), 1); // mid row [1-8]
            uint8x8_t mid_more_right = vext_u8(vget_low_u8(mid_row), vget_high_u8(mid_row), 2); // mid row [2-9]
            
            uint8x8_t bot_left = vget_low_u8(bot_row);       // bottom row [0-7]
            uint8x8_t bot_right = vext_u8(vget_low_u8(bot_row), vget_high_u8(bot_row), 1); // bottom row [1-8]
            uint8x8_t bot_more_right = vext_u8(vget_low_u8(bot_row), vget_high_u8(bot_row), 2); // bottom row [2-9]
            
            // Convert from uint8x8_t to int16x8_t for calculations
            int16x8_t top_left_16 = vreinterpretq_s16_u16(vmovl_u8(top_left));
            int16x8_t top_right_16 = vreinterpretq_s16_u16(vmovl_u8(top_right));
            int16x8_t top_more_right_16 = vreinterpretq_s16_u16(vmovl_u8(top_more_right));
            
            int16x8_t mid_left_16 = vreinterpretq_s16_u16(vmovl_u8(mid_left));
            int16x8_t mid_more_right_16 = vreinterpretq_s16_u16(vmovl_u8(mid_more_right));
            
            int16x8_t bot_left_16 = vreinterpretq_s16_u16(vmovl_u8(bot_left));
            int16x8_t bot_right_16 = vreinterpretq_s16_u16(vmovl_u8(bot_right));
            int16x8_t bot_more_right_16 = vreinterpretq_s16_u16(vmovl_u8(bot_more_right));
            
            // Calculate Gx
            // Gx = -1*top_left + 1*top_more_right + -2*mid_left + 2*mid_more_right + -1*bot_left + 1*bot_more_right
            int16x8_t gx = vnegq_s16(top_left_16);                 // -1 * top_left
            gx = vaddq_s16(gx, top_more_right_16);                // + 1 * top_more_right
            gx = vsubq_s16(gx, vshlq_n_s16(mid_left_16, 1));      // - 2 * mid_left
            gx = vaddq_s16(gx, vshlq_n_s16(mid_more_right_16, 1)); // + 2 * mid_more_right
            gx = vsubq_s16(gx, bot_left_16);                      // - 1 * bot_left
            gx = vaddq_s16(gx, bot_more_right_16);                // + 1 * bot_more_right
            
            // Calculate Gy
            // Gy = -1*top_left + -2*top_right + -1*top_more_right + 1*bot_left + 2*bot_right + 1*bot_more_right
            int16x8_t gy = vnegq_s16(top_left_16);                 // -1 * top_left
            gy = vsubq_s16(gy, vshlq_n_s16(top_right_16, 1));     // - 2 * top_right
            gy = vsubq_s16(gy, top_more_right_16);                // - 1 * top_more_right
            gy = vaddq_s16(gy, bot_left_16);                      // + 1 * bot_left
            gy = vaddq_s16(gy, vshlq_n_s16(bot_right_16, 1));     // + 2 * bot_right
            gy = vaddq_s16(gy, bot_more_right_16);                // + 1 * bot_more_right
            
            // Calculate magnitude approximation: |Gx| + |Gy| (faster than sqrt(Gx^2 + Gy^2))
            int16x8_t abs_gx = vabsq_s16(gx);
            int16x8_t abs_gy = vabsq_s16(gy);
            int16x8_t sum = vaddq_s16(abs_gx, abs_gy);
            
            // Scale down (approximation)
            sum = vshrq_n_s16(sum, 1);
            
            // Clamp to [0, 255]
            uint8x8_t result = vqmovun_s16(sum);
            
            // Store the result
            vst1_u8(output + y * width + x, result);
        }
        
        // Handle remaining pixels
        for (int x = width - (width - 1) % 8; x < width - 1; x++) {
            int gx = 0;
            int gy = 0;
            
            // Apply Sobel kernels
            gx -= input[(y - 1) * width + (x - 1)];     // top left
            gx += input[(y - 1) * width + (x + 1)];     // top right
            gx -= 2 * input[y * width + (x - 1)];       // middle left
            gx += 2 * input[y * width + (x + 1)];       // middle right
            gx -= input[(y + 1) * width + (x - 1)];     // bottom left
            gx += input[(y + 1) * width + (x + 1)];     // bottom right
            
            gy -= input[(y - 1) * width + (x - 1)];     // top left
            gy -= 2 * input[(y - 1) * width + x];       // top middle
            gy -= input[(y - 1) * width + (x + 1)];     // top right
            gy += input[(y + 1) * width + (x - 1)];     // bottom left
            gy += 2 * input[(y + 1) * width + x];       // bottom middle
            gy += input[(y + 1) * width + (x + 1)];     // bottom right
            
            // Compute magnitude (approximation)
            int magnitude = (abs(gx) + abs(gy)) >> 1;
            
            // Clamp to [0, 255]
            if (magnitude > 255) magnitude = 255;
            
            output[y * width + x] = (uint8_t)magnitude;
        }
    }
    
    // Handle border pixels (set to 0)
    for (int x = 0; x < width; x++) {
        output[x] = 0;  // Top row
        output[(height - 1) * width + x] = 0;  // Bottom row
    }
    
    for (int y = 1; y < height - 1; y++) {
        output[y * width] = 0;  // Left column
        output[y * width + width - 1] = 0;  // Right column
    }
}

// Generate a synthetic grayscale test image
void generate_test_image(uint8_t* gray, int width, int height) {
    for (int y = 0; y < height; y++) {
        for (int x = 0; x < width; x++) {
            // Create a pattern with some edges (circles)
            int cx = width / 2;
            int cy = height / 2;
            int dx = x - cx;
            int dy = y - cy;
            int dist = sqrt(dx * dx + dy * dy);
            
            // Multiple concentric circles
            uint8_t val = 0;
            if (dist % 32 < 16) {
                val = 255;
            }
            
            // Add some noise
            int noise = rand() % 25;
            val = (val + noise > 255) ? 255 : val + noise;
            
            gray[y * width + x] = val;
        }
    }
}

// Function to save a grayscale image as PGM (for visualization)
void save_pgm(const char* filename, const uint8_t* gray, int width, int height) {
    FILE* file = fopen(filename, "wb");
    if (!file) {
        printf("ERROR: Could not open file %s for writing.\n", filename);
        return;
    }
    
    // Write PGM header
    fprintf(file, "P5\n%d %d\n255\n", width, height);
    
    // Write image data
    fwrite(gray, 1, width * height, file);
    
    fclose(file);
}

// Main function
int main(int argc, char** argv) {
    // Default image size
    int width = 512;
    int height = 512;
    
    // Allow overriding image size from command line
    if (argc > 2) {
        width = atoi(argv[1]);
        height = atoi(argv[2]);
        if (width <= 0 || height <= 0) {
            width = 512;
            height = 512;
        }
    }
    
    // Seed random number generator
    srand(42);  // Fixed seed for reproducibility
    
    printf("Sobel Edge Detection Example\n");
    printf("---------------------------\n");
    printf("Image size: %dx%d\n", width, height);
    
    // Check if NEON is supported
    if (!check_neon_support()) {
        printf("ERROR: ARM NEON is not supported on this platform.\n");
        return 1;
    }
    
    // Print platform information
    print_platform_info();
    
    // Allocate memory for images
    uint8_t* input = (uint8_t*)malloc(width * height);
    uint8_t* output_neon = (uint8_t*)malloc(width * height);
    uint8_t* output_scalar = (uint8_t*)malloc(width * height);
    
    if (!input || !output_neon || !output_scalar) {
        printf("ERROR: Memory allocation failed.\n");
        return 1;
    }
    
    // Generate a test image
    generate_test_image(input, width, height);
    
    // Create comparison timer
    perf_comparison_t* comp = comparison_create("Sobel Edge Detection");
    
    // Number of iterations for more accurate timing
    const int iterations = 20;
    
    // Perform edge detection using NEON
    timer_start(comp->simd_timer);
    for (int i = 0; i < iterations; i++) {
        neon_sobel_edge(input, output_neon, width, height);
    }
    timer_stop(comp->simd_timer);
    
    // Perform edge detection using scalar code
    timer_start(comp->scalar_timer);
    for (int i = 0; i < iterations; i++) {
        scalar_sobel_edge(input, output_scalar, width, height);
    }
    timer_stop(comp->scalar_timer);
    
    // Verify results
    int errors = 0;
    int max_diff = 0;
    
    for (int i = 0; i < width * height; i++) {
        int diff = abs((int)output_neon[i] - (int)output_scalar[i]);
        if (diff > 5) {  // Allow small differences due to approximation
            errors++;
            if (diff > max_diff) {
                max_diff = diff;
            }
        }
    }
    
    printf("Verification: %d errors (max diff: %d) out of %d pixels\n", 
           errors, max_diff, width * height);
    
    // Save images for visual inspection
    save_pgm("input.pgm", input, width, height);
    save_pgm("edges_neon.pgm", output_neon, width, height);
    save_pgm("edges_scalar.pgm", output_scalar, width, height);
    
    printf("Saved images: input.pgm, edges_neon.pgm, edges_scalar.pgm\n");
    
    // Print performance comparison
    comparison_print(comp);
    
    // Clean up
    free(input);
    free(output_neon);
    free(output_scalar);
    comparison_destroy(comp);
    
    return 0;
}
#+END_SRC

** Key NEON Operations

What makes the NEON implementation efficient:

1. *Data Extraction*: Using `vext_u8` to slide the window across rows
2. *Parallel Convolution*: Computing all 9 multiplications in parallel
3. *Bit Shifting*: Using `vshlq_n_s16` for multiplication by 2
4. *Magnitude Approximation*: Using Manhattan distance (|Gx| + |Gy|) instead of Euclidean (sqrt(Gx² + Gy²))

** Questions for Exploration
1. How does the Manhattan distance approximation affect edge detection quality?
2. How would you implement calculating the gradient direction (for Canny edge detection)?
3. What memory access patterns would be more efficient for this type of 2D convolution?
4. Could we optimize further by using larger NEON vectors (128-bit)?

* Histogram Calculation
:PROPERTIES:
:header-args: :tangle examples/histogram.c :mkdirp yes
:END:

Computing histograms is challenging for SIMD because it involves counting occurrences, which doesn't map well to parallel operations. We'll explore techniques to optimize this.

** Implementation
#+BEGIN_SRC c
/**
 * histogram.c
 * Demonstrates histogram calculation using ARM NEON SIMD
 */
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <time.h>
#include <string.h>
#include <arm_neon.h>
#include "../include/platform_detect.h"
#include "../include/neon_utils.h"
#include "../include/perf_test.h"

// Scalar (non-SIMD) implementation for comparison
void scalar_histogram(const uint8_t* image, uint32_t* histogram, int size) {
    // Clear histogram
    memset(histogram, 0, 256 * sizeof(uint32_t));
    
    // Count occurrences
    for (int i = 0; i < size; i++) {
        histogram[image[i]]++;
    }
}

// NEON SIMD implementation
void neon_histogram(const uint8_t* image, uint32_t* histogram, int size) {
    // Clear histogram
    memset(histogram, 0, 256 * sizeof(uint32_t));
    
    // Process data in chunks of 16 bytes
    int chunks = size / 16;
    
    // Use local histograms to avoid memory conflicts
    uint16_t local_hist[4][256];
    memset(local_hist, 0, 4 * 256 * sizeof(uint16_t));
    
    for (int i = 0; i < chunks; i++) {
        // Load 16 pixels
        uint8x16_t pixels = vld1q_u8(image + i * 16);
        
        // Extract bytes to process them separately
        uint8x8_t low = vget_low_u8(pixels);
        uint8x8_t high = vget_high_u8(pixels);
        
        // Further split to avoid conflicts when incrementing
        uint8x4_t low1 = vget_low_u8(low);
        uint8x4_t low2 = vget_high_u8(low);
        uint8x4_t high1 = vget_low_u8(high);
        uint8x4_t high2 = vget_high_u8(high);
        
        // Extract individual values (we need to do this because NEON doesn't have 
        // scatter operations to increment arbitrary memory locations)
        uint8_t values[16];
        vst1_u8(values, low);
        vst1_u8(values + 8, high);
        
        // Update histograms (still need to do this in scalar fashion)
        // Using separate local histograms to avoid conflicts
        for (int j = 0; j < 4; j++) {
            local_hist[0][values[j]]++;
            local_hist[1][values[j + 4]]++;
            local_hist[2][values[j + 8]]++;
            local_hist[3][values[j + 12]]++;
        }
    }
    
    // Process remaining pixels
    for (int i = chunks * 16; i < size; i++) {
        local_hist[0][image[i]]++;
    }
    
    // Combine local histograms into the final result
    for (int i = 0; i < 256; i++) {
        histogram[i] = local_hist[0][i] + local_hist[1][i] + local_hist[2][i] + local_hist[3][i];
    }
}

// Generate a test image
void generate_test_image(uint8_t* image, int size) {
    for (int i = 0; i < size; i++) {
        image[i] = rand() % 256;
    }
}

// Main function
int main(int argc, char** argv) {
    // Default image size
    int width = 1024;
    int height = 768;
    
    // Allow overriding image size from command line
    if (argc > 2) {
        width = atoi(argv[1]);
        height = atoi(argv[2]);
        if (width <= 0 || height <= 0) {
            width = 1024;
            height = 768;
        }
    }
    
    int size = width * height;
    
    printf("Histogram Calculation Example\n");
    printf("----------------------------\n");
    printf("Image size: %dx%d (%d pixels)\n", width, height, size);
    
    // Check if NEON is supported
    if (!check_neon_support()) {
        printf("ERROR: ARM NEON is not supported on this platform.\n");
        return 1;
    }
    
    // Print platform information
    print_platform_info();
    
    // Allocate memory
    uint8_t* image = (uint8_t*)malloc(size);
    uint32_t* hist_neon = (uint32_t*)malloc(256 * sizeof(uint32_t));
    uint32_t* hist_scalar = (uint32_t*)malloc(256 * sizeof(uint32_t));
    
    if (!image || !hist_neon || !hist_scalar) {
        printf("ERROR: Memory allocation failed.\n");
        return 1;
    }
    
    // Generate test image
    srand(time(NULL));
    generate_test_image(image, size);
    
    // Create comparison timer
    perf_comparison_t* comp = comparison_create("Histogram Calculation");
    
    // Number of iterations for more accurate timing
    const int iterations = 20;
    
    // Calculate histogram using NEON
    timer_start(comp->simd_timer);
    for (int i = 0; i < iterations; i++) {
        neon_histogram(image, hist_neon, size);
    }
    timer_stop(comp->simd_timer);
    
    // Calculate histogram using scalar code
    timer_start(comp->scalar_timer);
    for (int i = 0; i < iterations; i++) {
        scalar_histogram(image, hist_scalar, size);
    }
    timer_stop(comp->scalar_timer);
    
    // Verify results
    int errors = 0;
    for (int i = 0; i < 256; i++) {
        if (hist_neon[i] != hist_scalar[i]) {
            errors++;
            printf("Mismatch at bin %d: NEON=%u, Scalar=%u\n", 
                   i, hist_neon[i], hist_scalar[i]);
        }
    }
    
    printf("Verification: %d errors out of 256 bins\n", errors);
    
    // Print some histogram stats
    uint32_t min_value = 0xFFFFFFFF;
    uint32_t max_value = 0;
    float avg_value = 0.0f;
    
    for (int i = 0; i < 256; i++) {
        if (hist_scalar[i] < min_value) min_value = hist_scalar[i];
        if (hist_scalar[i] > max_value) max_value = hist_scalar[i];
        avg_value += hist_scalar[i];
    }
    avg_value /= 256.0f;
    
    printf("Histogram stats: min=%u, max=%u, avg=%.2f\n", 
           min_value, max_value, avg_value);
    
    // Print performance comparison
    comparison_print(comp);
    
    // Clean up
    free(image);
    free(hist_neon);
    free(hist_scalar);
    comparison_destroy(comp);
    
    return 0;
}
#+END_SRC

** Key NEON Operations

What makes the NEON implementation more efficient:

1. *Multiple Histograms*: Using 4 separate histograms to reduce contention
2. *SIMD Data Loading*: Loading 16 pixels at once with `vld1q_u8`
3. *Lane Extraction*: Separating data into non-overlapping groups with `vget_low_u8`/`vget_high_u8`
4. *Vectorized Processing*: Reducing memory access overhead by processing 16 pixels per iteration

** Questions for Exploration
1. Why is histogram calculation challenging for SIMD?
2. How could we further optimize using atomic operations?
3. Would a reduction in histogram bins (e.g., to 64 instead of 256) enable more efficient SIMD operations?
4. What other approaches could improve histogram calculation?

* Conclusion

Through this exploration, we've implemented several image processing algorithms using ARM NEON SIMD instructions. Each algorithm presents different challenges and opportunities for optimization:

1. **RGB to Grayscale** - Demonstrates the power of SIMD for simple pixel-wise operations
2. **Box Blur** - Shows how to handle sliding window operations with NEON
3. **Sobel Edge Detection** - Illustrates complex 2D convolution and approximation techniques
4. **Histogram Calculation** - Reveals challenges and solutions for non-sequential memory access patterns

The Socratic approach encourages asking questions to deepen understanding. Some key insights:

- SIMD operations are most effective when data is contiguous and calculations are uniform
- Approximations can significantly improve performance with minimal quality loss
- Memory access patterns greatly impact SIMD efficiency
- Some algorithms (like histograms) require creative approaches for effective SIMD implementation

As you explore further, consider how these techniques might apply to other image processing tasks or extend to other domains like signal processing or scientific computing.
